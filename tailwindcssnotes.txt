Tailwind Css stuff...

** Prior knowledge needed:-
	HTML and CSS 



I. Setup
	1. install node.js 
		- node -v /checks version and if installed/
	2. open a text editor and open a terminal 
	3. create a new package.json
		- npm init -y /creates package.json which keeps track of the dependencies/
	4. install tailwindcss
		- npm install tailwindcss /it will appear as a dependency, creates node_modules and a package-lock.json/
	5. create a style-source folder inside the root directory of the project and generate the source CSS file
		- base, components, and utilities append to the CSS file
	6. create a new script on the package.json file
		- "a_name": "tailwindcss build style-source-directory.css -o new-output-directory.css"
 	7. run the script 
		- npm run a_name
		** run this script every time you change/edit the source file / WE MAY NEED TO USE IT MORE OFTEN THAN EXPECTED - issue??! /

	8. create a tailwind.config.js file; this is a file of different CSS properties used by tailwind
		- npx tailwindcss init -full
	9. we can name the former file on no. 8 as tailwind-default.config.js
	10. we can create a new tailwind.config.js file /but an empty one - to be used for custom styles by us/
		- npx tailwindcss init
		

*** ON THE tailwind.config.js files ... add the directory to our template files on the content property inside the file

*optional*--- install the tailwind extension for vs code or other editors so as to make the classes pop when in development
*optional*--- install the liver-server feature.. on terminal:- npm live-server
		----to start it.. on terminal:- live-server the_holding_folder_of_the_html_file
*optional*--- to customize some classes to your liking; go to the tailwind.config.js file and edit the properties there but don't forget to run the CSS building script when you're done.



II. Working with tailwind
	
** start with creating your HTML template file
** 
** Go to Tailwind docs to view the different properties and styles Tailwind offers. 	
	
	1. Font and Color
		- text-'color'-'strength(100-900)' -- the class for text color
		- font-'size/type/bold/semi-bold/etc..' -- the class for the font size, strength, type, and so on
		- italic -- class for italic styles
		

	2. Spacing, Padding, and Margin
		- p-'number' -- the class for padding all around
		- pt-'number'/pb-'number'/pr-'number'/pl-'number' -- the class for particular side of padding
		- px-'number'/py-'number' -- the class for padding along a particular axis
			
		- m-'number' -- the class for margin all around
		- mt-'number'/mb-'number'/mr-'number'/ml-'number' -- the class for particular side of margin
		- mx-'number'/my-'number' -- the class for a margin along a particular axis

		- space-'x/y-number' -- it's like adding a margin between elements
		- space-'x/y'-reverse -- when reversing the children

			**  1px = 1rem
			** 'number'/ 4 = in_rem
			**  1 = 4px = 0.25rem
	--- The conversion rates above apply to most tailwind properties
		
		N.B. There are other classes for padding, margin, and so on.. we can dive deeper into the tailwind documentation for more classes


    3. Borders
		- border-'t/b/r/l-number' border-'color' -- to give the border a width and a color
		- border-'x/y-number' << -- this is in a particular axis
		
		- divide-'x/y-number' << -- this is going to divide the elements with a single border between them
		- divide-'x/y'-reverse  -- this is when reversing the elements
		
	
	4. Background
		- bg-'color-number' -- almost like setting the text color
		- bg-'color-number/opacity'  -- also setting the transparency


	5. Using Flexbox
		- flex -- a class that makes child elements flex items
		- items-'end/start/center.../' -- a class that aligns elements/items
		- justify-'center/end//start...' -- a class that justifies elements
		

	6. Responsive classes
		* in tailwind we don't have to create media queries, instead prefix elements/classes with responsive classes 

		- 'breakpoint_name':'particular_class' -- this is the form of the responsive class
		- example:- "bg-red-500 sm:bg-green-900"  ---  on a breakpoint called 'sm' apply the green class
			
			* we configure the breakpoints at the tailwind.config.js file

	
	7. Cards
		- Styling:- setting a background, controlling the corners and the overflow, also giving it a shadow
			- bg-blue-300 rounded/controlling the corners/ overflow-hidden shadow-sm
		- images:- setting the width, height, object-cover/fit/.. and making it more responsive to breakpoints



N.B:--- Make an element a block element so as to start a new line, opposite of the inline element   

	8.  Badge
			- they are posted within and on to other elements such as cards
			- they are positioned absolutely inside their relative parent element
			-set bg, text color/font/size, corners' radius


	9. using @apply Directive
		- modifying the source CSS file to contain shortcut class names that are custom to us
			- example:- .badge{
				@apply bg-red-400 text-yellow-300 text-xs rounded-full absolute top-0 ml-2 mt-2
			}

		- this way we can use the badge as a class that replaces or applies all the above classes
 

	10. Using Grid
		- 'grid' then grid-rows/cols- "number" --- this is how you set a container to grid 
			--- Then we select if we want the view in a horizontal or vertical alignment /cols/rows/
		- use 'gap - "number"' -- this gives space between them depending on the number

		- SPAN:- make use of how many columns or rows an element spans
			- col-span-'number' or - row-span-'number'

	
	11. Buttons
		- they can be custom to our liking, but they are usually:-
			  --  rounded, bordered, and effect upon hover maybe or pointer/cursor
			  -- We can design and embed it in our source CSS file for easy later use 
			  			eg:- .btn{ 
							@apply rounded-full py-2 px-3 uppercase text-xs font-bold cursor-pointer tracking-wider;
								}

	12. Icons
		- Recommended to use Heroicons; 
			- where you can choose different types of already made icons and export them to your templates as 'svg'


	13. Hover Effects
		- hover:'we call the particular class we want to implement'
			---- Eg:- hover:text-color-white    --> this changes the text-color of the element to white when it's being hovered at! 


	14. Making a hidden button
		-  using JavaScript to add/remove classes based on events
			---- Eg:- make a funtion that removes/adds the class hidden


	14. Transitions
		- to make changes